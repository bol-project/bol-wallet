@using Bol.Core.Model
@inject INavigationService NavigationService
@inject IBolService bolService;
@inject ISecureRepository secureRepository;

<MudLayout>
    <MudAppBar Style="background-color:#0050FF">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <MudProgressCircular Indeterminate="true" Size="Size.Small" hidden="@idle" />
        <MudIconButton Icon="@Icons.Material.Rounded.Refresh" Color="Color.Inherit" OnClick="@OnRefresh" />
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Variant="@DrawerVariant.Responsive" PreserveOpenState="true">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Bol Menu</MudText>
        </MudDrawerHeader>
        <MudNavMenu Bordered="true">
            <MudNavGroup Title="Transactions" Expanded="true">
                <MudNavLink Icon="@Icons.Material.Rounded.AddReaction" OnClick="() => NavigationService.NavigateTo<ClaimViewModel>(true)">Claim your Bol</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Rounded.TransferWithinAStation" OnClick="() => NavigationService.NavigateTo<MoveClaimViewModel>(true)">Transfer Claim</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Rounded.Send" OnClick="() => NavigationService.NavigateTo<SendBolViewModel>(true)">Transfer Bol</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Rounded.Receipt" Href="https://monitor.mainnet.bolchain.net">Receive Bol</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="Community" Expanded="true">
                <MudNavLink Icon="@Icons.Material.Rounded.AccountCircle" OnClick="() => NavigationService.NavigateTo<AccountViewModel>(true)">My Account</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Rounded.SupervisedUserCircle" OnClick="() => NavigationService.NavigateTo<GetCertifiedViewModel>(true)">Get Certified</MudNavLink>
           <MudNavLink Icon="@Icons.Material.Rounded.Login" OnClick="() => NavigationService.NavigateTo<CompleteBolLoginChallengeViewModel>(true)">Sign In with Bol</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="Certifier">
                @if (!BolAccount.IsCertifier)
                {
                    <MudNavLink Icon="@Icons.Material.Rounded.SupervisorAccount" OnClick="() => App.Current.MainPage.Navigation.PushAsync(new Views.RegisterAsCertifierPage())">Become a Certifier</MudNavLink>
                }
                else
                {
                    <MudNavLink Icon="@Icons.Material.Rounded.PersonAdd" OnClick="() => NavigationService.NavigateTo<CertifyViewModel>(true)">Certify a CodeName</MudNavLink>
                    <MudNavLink Icon="@Icons.Material.Rounded.AddModerator" OnClick="() => NavigationService.NavigateTo<WhitelistViewModel>(true)">Whitelist a Main Address</MudNavLink>
                    <MudNavLink Icon="@Icons.Material.Rounded.LockPerson" OnClick="() => App.Current.MainPage.Navigation.PushAsync(new Views.AddMultiCitizenship())">Submit a Multiple Citizenship</MudNavLink>
                    <MudNavLink Icon="@Icons.Material.Rounded.AttachMoney" OnClick="() => App.Current.MainPage.Navigation.PushAsync(new Views.SetCertifierFeePage())">Set Your Fee</MudNavLink>
                    <MudNavLink Icon="@Icons.Material.Rounded.RemoveModerator" OnClick="() => ShowUnregisterConfirmation()">Unregister as Certifier</MudNavLink>
                }
            </MudNavGroup>
            <MudNavGroup Title="Tools">
                <MudNavLink Icon="@Icons.Material.Rounded.History" OnClick="() => NavigationService.NavigateTo<TransactionsViewModel>(true)">History</MudNavLink>
                @*                 <MudNavLink Icon="@Icons.Material.Rounded.Explore" Href="https://explorer.mainnet.bolchain.net">Explore Blockchain</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Rounded.Monitor" Href="https://monitor.mainnet.bolchain.net">Monitor Seeds</MudNavLink> *@
                @*                 <MudNavLink Icon="@Icons.Material.Rounded.Logout" Href="https://monitor.mainnet.bolchain.net">Unload Wallet</MudNavLink> *@
            </MudNavGroup>
            <MudNavLink Icon="@Icons.Material.Rounded.Logout" OnClick="async () => await CloseWallet()">Close Wallet</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <CascadingValue Value="BolAccount">
        <MudMainContent>
            @ChildContent
        </MudMainContent>
    </CascadingValue>
</MudLayout>

@code {
    [Parameter] public BolAccount BolAccount { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public EventCallback<BolAccount> OnRefreshCallback { get; set; }

    bool open = false;
    bool idle = true;

    void ToggleDrawer()
    {
        open = !open;
    }

    private async Task OnRefresh()
    {
        idle = false;
        await OnRefreshCallback.InvokeAsync(BolAccount);
        await Task.Delay(500);
        idle = true;
    }

    private async Task ShowUnregisterConfirmation()
    {
        try
        {
            bool confirmed = await App.Current.MainPage.DisplayAlert("Confirm", "Are you sure you want to unregister as a certifier?", "Yes", "No");
            if (confirmed)
            {
                await bolService.UnRegisterAsCertifier();
            }
        }
        catch (Exception ex)
        {
            await Toast.Make(ex.Message).Show();
        }
    }

    private async Task CloseWallet()
    {
        var confirm = await App.Current.MainPage.DisplayAlert(
            "Close Wallet",
            "Closing your wallet will clear any saved wallet and/or account certification data!",
            "I understand, close my wallet!",
            "Cancel");

        if (!confirm)
        {
            return;
        }
        
        await secureRepository.RemoveAsync("userdata");
        await NavigationService.NavigateTo<PreloadViewModel>(changeRoot: true);
    }
}