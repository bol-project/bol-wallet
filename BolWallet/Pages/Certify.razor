@page "/certify"
@implements IDisposable
@inject Breadcrumbs breadcrumbs
@inject IDialogService DialogService
@inject NavigationManager nav;
@inject UserViewModel userViewModel
@inject CertifyViewModel certifyViewModel

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-2">
            <MudText Color="@Color.Default">Code Name: @certifyViewModel.BolAccount.CodeName</MudText>
            <MudText Color="@Color.Default">Account Status: @certifyViewModel.BolAccount.AccountStatus</MudText>
            @if (!certifyViewModel.IsCertified)
            {
                if (certifyViewModel.MandatoryCertifiers != null && certifyViewModel.MandatoryCertifiers.Count >0){
                    foreach (var itm in certifyViewModel.MandatoryCertifiers)
                    {
                        <MudCheckBox @bind-Checked="@Size_CheckBox1" Size="Size.Small" Color="Color.Primary">itm.Key</MudCheckBox>
                    }
                }
                <MudTextField @bind-Value="@certifyViewModel.CertifierCodename" Label="Paste Certifier Codename" Variant="MudBlazor.Variant.Outlined"></MudTextField>
                <br/>
                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="@(async z=> await certifyViewModel.SelectMandatoryCertifiers())">Select Mandatory Certifiers</MudButton>
                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="@(async z=> await certifyViewModel.RequestCertification())">Request Certification No.{0} out of 2</MudButton>
            } else
            {
                <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="@(async z=> await certifyViewModel.PayCertificationFees())">Pay Certification Fees</MudButton>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    private bool Size_CheckBox1;
    protected override async Task OnInitializedAsync()
    {
        await certifyViewModel.Initialize();


        breadcrumbs._items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/index-with-account", disabled: false),
            new BreadcrumbItem("Certify", href: null, disabled: true),
        };

        breadcrumbs.userData = userViewModel._userData;
        breadcrumbs.Update();
        breadcrumbs.OnButtonClick += HandleButton;
        
    }
    protected async void HandleButton(object sender, NavButtons args)
    {
        if (args == NavButtons.Refresh)
        {
            await certifyViewModel.UpdateBolAccount();

        }
        
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        breadcrumbs.OnButtonClick -= HandleButton;
    }
}
