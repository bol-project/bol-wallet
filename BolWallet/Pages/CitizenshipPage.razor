@page "/citizenship"

@inject RegisterContent _content;
@inject INavigationService navigationService;
@inject ISecureRepository secureRepository;

<MudThemeProvider />

<EditForm Model="@citizenshipsForm" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7" style="margin-left: auto; margin-right: auto; margin-top: 10px;">
            <MudCard>
                <MudCardContent>
                    <MudSelect style="margin-bottom: 20px;" T="Country" Label="Birth Country" Required="true" For="@(() => citizenshipsForm.CountryOfBirth)" HelperText="Choose the country where you were born." @bind-Value="citizenshipsForm.CountryOfBirth">
                        @foreach (var country in _content.Countries)
                        {
                            <MudSelectItem T="Country" Value="country">@country.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect style="margin-bottom: 20px;" T="string" SelectedValues="SelectedCitizeships" SelectedValuesChanged="SelectedCitizenshipsChanged" Label="Citizenships" Required="true" For="@(() => citizenshipsForm.Citizenships)" HelperText="Choose up to three citizenships from the options provided." MultiSelection="true" @bind-Value="citizenshipsForm.Citizenships">
                        @foreach (var country in _content.Countries)
                        {
                            <MudSelectItem T="string" Value="country.Name">@country.Name</MudSelectItem>
                        }
                    </MudSelect>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="MudBlazor.ButtonType.Submit"
                               Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    CitizenshipsForm citizenshipsForm = new CitizenshipsForm();

    List<string> SelectedCitizeships = new() { };

    private async Task SelectedCitizenshipsChanged(IEnumerable<string> selectedCountries)
    {
        SelectedCitizeships = selectedCountries.ToList();

        if (SelectedCitizeships.Count > 3)
        {
            SelectedCitizeships.RemoveAt(SelectedCitizeships.Count - 1);

            await Toast.Make("Maximum of 3 citizenships can be selected.").Show();

            return;
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var citizenshipsForm = context.Model as CitizenshipsForm;

            UserData userData = new UserData
            {
                Citizenships = citizenshipsForm.Citizenships.Split(",").Select(c => c.Trim()).ToArray()
            };

            await secureRepository.SetAsync("userdata", userData);

            await navigationService.NavigateTo<CreateCodenameViewModel>(true);
        }
        catch (Exception ex)
        {
            await Toast.Make(ex.Message).Show();
        }
    }
}
