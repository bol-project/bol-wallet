@page "/citizenship"

@inject RegisterContent _content;
@inject INavigationService navigationService;
@inject ISecureRepository secureRepository;

<MudThemeProvider />

<EditForm Model="@citizenshipsForm" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7" style="margin-left: auto; margin-right: auto; margin-top: 10px;">
            <MudCard>
                <MudCardContent>
                    <MudSelect style="margin-bottom: 20px;" T="string" SelectedValues="SelectedCitizeships" SelectedValuesChanged="SelectedCitizenshipsChanged" Label="Citizenships" Required="true" For="@(() => citizenshipsForm.Citizenships)" HelperText="Choose up to three citizenships from the options provided." MultiSelection="true" @bind-Value="citizenshipsForm.Citizenships">
                        @foreach (var country in _content.Countries)
                        {
                            <MudSelectItem T="string" Value="country.Name">@country.Name</MudSelectItem>
                        }
                    </MudSelect>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="MudBlazor.ButtonType.Submit"
                               Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    CitizenshipsForm citizenshipsForm = new CitizenshipsForm();

    UserData userData;

    List<string> SelectedCitizeships = new() { };

    protected override async Task OnInitializedAsync()
    {
        userData = await secureRepository.GetAsync<UserData>("userdata") ?? new UserData();
        if (userData?.Citizenships is null) return;

        SelectedCitizeships = userData.Citizenships.Select(c => c.Name).ToList();
        citizenshipsForm.Citizenships = string.Join(",", SelectedCitizeships);
    }

    private async Task SelectedCitizenshipsChanged(IEnumerable<string> selectedCountries)
    {
        SelectedCitizeships = selectedCountries.ToList();

        if (SelectedCitizeships.Count > 3)
        {
            SelectedCitizeships.RemoveAt(SelectedCitizeships.Count - 1);

            await Toast.Make("Maximum of 3 citizenships can be selected.").Show();

            return;
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var citizenshipsForm = context.Model as CitizenshipsForm;

            List<Country> citizenships = new List<Country>();
            List<EncryptedCitizenshipForm> encryptedCitizenshipForms = new List<EncryptedCitizenshipForm>();

            foreach (var citizenshipName in citizenshipsForm.Citizenships.Split(",").Select(c => c.Trim()))
            {
                BolWallet.Models.Country citizenshipCountry = _content.Countries.FirstOrDefault(c => c.Name == citizenshipName);

                citizenships.Add(citizenshipCountry);

                var savedEncryptedCitizenshipForm = userData.EncryptedCitizenshipForms.FirstOrDefault(ecf => ecf.CountryName == citizenshipName);

                encryptedCitizenshipForms.Add(new EncryptedCitizenshipForm()
                {
                    CountryName = citizenshipCountry.Name,
                    CountryCode = citizenshipCountry.Alpha3,
                    CitizenshipHashes = savedEncryptedCitizenshipForm?.CitizenshipHashes ?? new Bol.Core.Model.CitizenshipHashTable(),
                    CitizenshipHashTableFileNames = savedEncryptedCitizenshipForm?.CitizenshipHashTableFileNames ?? new CitizenshipHashTableFileNames(),
                    FirstName = savedEncryptedCitizenshipForm?.FirstName,
                    SecondName = savedEncryptedCitizenshipForm?.SecondName,
                    ThirdName = savedEncryptedCitizenshipForm?.ThirdName,
                    SurName = savedEncryptedCitizenshipForm?.SurName,
                    Nin = savedEncryptedCitizenshipForm?.Nin ?? string.Empty
                });
            }

            userData.Citizenships = citizenships;
            userData.EncryptedCitizenshipForms = encryptedCitizenshipForms;

            await secureRepository.SetAsync("userdata", userData);

            await App.Current.MainPage.Navigation.PushAsync(new Views.EcryptedCitizenshipPage());
        }
        catch (Exception ex)
        {
            await Toast.Make(ex.Message).Show();
        }
    }
}
