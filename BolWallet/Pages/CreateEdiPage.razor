@page "/create-edi-page"

@inherits MvvmComponentBase<CreateEdiViewModel>
@inject GenerateWalletWithPasswordViewModel GenerateWalletWithPasswordViewModel;

<MudThemeProvider />

<MudGrid Style="padding:5px">
    <Virtualize Items="IdentificationDocuments" Context="edi">
        <MudItem xs="12" sm="12" md="12">
            <MudStack Row="true" @key="edi">
                <MudField Style="width:150px" Label="@edi.Item3" Variant="MudBlazor.Variant.Text" InnerPadding="false"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.CheckCircle" AdornmentColor="@edi.Item2">@edi.Item4</MudField>
                    <MudIconButton Icon="@Icons.Material.Filled.UploadFile" aria-label="@edi.Item1" OnClick="@(args=>GetFile(edi.Item1))"></MudIconButton>
                    @if (edi.Item1 == "Voice")
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.SpatialAudio" aria-label="@edi.Item1" OnClick="@(args=>GetAudio(edi.Item1))"></MudIconButton>
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.CameraAlt" aria-label="@edi.Item1" OnClick="@(args=>GetPhoto(edi.Item1))"></MudIconButton>
                    }
            </MudStack>
        </MudItem>
    </Virtualize>
    <MudItem xs="12" sm="12" md="12">
        <div class="text-center">
            <MudButton Variant="MudBlazor.Variant.Filled" OnClick="Submit" Class="ml-auto" Color="Color.Primary" Disabled="@(!(identityImported && drivingLicenceImported && passportImported))">Submit</MudButton>
        </div>
    </MudItem>
</MudGrid>
<style>
    .text-center {
        text-align: center;
    }
</style>
@code {
    CreateEdiViewModel createEdiViewModel;

    List<(string, MudBlazor.Color, string, string)> IdentificationDocuments = new()
    {
        {new("IdentityCard",Color.Transparent, "Identity Card*", "") },
        {new("DrivingLicense",Color.Transparent, "Driving License*", "") },
        {new("Passport",Color.Transparent, "Passport*", "") },
        {new("Photo",Color.Transparent, "Photo", "") },
        {new("NinCertificate",Color.Transparent, "Nin Certificate", "") },
        {new("BirthCertificate",Color.Transparent, "Birth Certificate", "") },
        {new("TelephoneBill",Color.Transparent, "Τelephone Bill", "") },
        {new("Other",Color.Transparent, "Other", "") },
        {new("Voice",Color.Transparent, "Voice", "") },

    };

    bool identityImported = false, drivingLicenceImported = false, passportImported = false;

    protected override void OnInitialized()
    {
        createEdiViewModel = ViewModel;

        base.OnInitialized();
    }

    private async Task Submit()
    {
        await createEdiViewModel.SubmitCommand.ExecuteAsync(null);
    }

    private async Task GetFile(string property)
    {
        await createEdiViewModel.PickPhotoCommand.ExecuteAsync(property);

        await UpdateIdentificationDocumentsList(property);
    }

    private async Task GetPhoto(string property)
    {
        await createEdiViewModel.TakePhotoCommand.ExecuteAsync(property);

        await UpdateIdentificationDocumentsList(property);
    }

    private async Task GetAudio(string property)
    {
        await createEdiViewModel.RecordAudioCommand.ExecuteAsync(null);

        await UpdateIdentificationDocumentsList(property);
    }

    private async Task UpdateIdentificationDocumentsList(string property)
    {
        var propertyValue = createEdiViewModel.EdiForm.GetType().GetProperty(property).GetValue(createEdiViewModel.EdiForm, null);

        if (propertyValue != null)
        {
            string filePath = propertyValue.ToString();
            if (!string.IsNullOrEmpty(filePath))
            {
                var index = IdentificationDocuments.FindIndex(x => x.Item1 == property);

                filePath = filePath.Length <= 20 ? filePath : filePath.Substring(0, 20) + "...";

                IdentificationDocuments[index] = new(IdentificationDocuments[index].Item1, Color.Success, IdentificationDocuments[index].Item3, filePath);

                if (property == "IdentityCard")
                    identityImported = true;
                else if (property == "DrivingLicense")
                    drivingLicenceImported = true;
                else if (property == "Passport")
                    passportImported = true;

                await InvokeAsync(() => StateHasChanged());
            }
        }
    }
}
