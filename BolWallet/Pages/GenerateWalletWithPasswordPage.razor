@page "/generate-wallet-with-password"

@inherits MvvmComponentBase<GenerateWalletWithPasswordViewModel>
@inject NavigationManager nav;

<MudThemeProvider />

    <MudOverlay @bind-Visible="isProgressBarVisible" DarkBackground="true">
        <MudProgressCircular Color="Color.Primary" Style="height:170px;width:170px;" Indeterminate="true" />
    </MudOverlay>
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="7" style="margin-left: auto; margin-right: auto; margin-top: 10px;">
                <MudCard>
                    <MudCardContent>

                        <MudTextField Immediate=true Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                      @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        <MudTextField Immediate=true Label="Password" HelperText="Repeat the password" Class="mt-3"
                                      @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="MudBlazor.ButtonType.Submit"
                                    Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto">Create Your Wallet</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
@code {
    GenerateWalletWithPasswordViewModel generateWalletWithPasswordViewModel;

    PasswordForm model = new PasswordForm();

    private bool isProgressBarVisible = false;

    protected override void OnInitialized()
    {
        generateWalletWithPasswordViewModel = ViewModel;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        isProgressBarVisible = true;

        await InvokeAsync(() => StateHasChanged());

        generateWalletWithPasswordViewModel.Password = model.Password;

        await generateWalletWithPasswordViewModel.SubmitCommand.ExecuteAsync(null);

        isProgressBarVisible = false;

        await InvokeAsync(() => StateHasChanged());
    }
}
