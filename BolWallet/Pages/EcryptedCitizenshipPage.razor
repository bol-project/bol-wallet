@page "/encrypted-citizenship"
@using Microsoft.Extensions.Logging

@inherits MvvmComponentBase<SubmitCitizenshipViewModel>

@inject ILogger<EcryptedCitizenshipPage> logger;

<MudThemeProvider />

<MudOverlay Visible="ViewModel.IsLoading" DarkBackground="true">
    <MudProgressCircular Color="Color.Primary" Style="height:170px;width:170px;" Indeterminate="true" />
</MudOverlay>

@if (ViewModel.IsFormInitialized)
{
    <MudContainer Class="mb-10" Style="margin-top: 30px;">
        <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal">
            @foreach (var country in ViewModel.SelectedCountryNames)
            {
                var isSubmitted = !ViewModel.OutstandingCitizenships.Contains(country);
                var isSelected = country == form.CountryName;

                var color = isSubmitted
                    ? Color.Success
                    : isSelected
                        ? Color.Primary
                        : Color.Default;
                <MudTimelineItem Color="@color" Size="Size.Medium">
                    <MudText Align="Align.Center">@country</MudText>
                </MudTimelineItem>
            }
        </MudTimeline>
    </MudContainer>
    <EditForm Model="@form" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <MudCard>
            <MudText Style="text-align: center;" Typo="Typo.h6">Submit your citizenship for @form.CountryName</MudText>
            <MudCardContent>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField Class="styled-textfield" T="string" @bind-Value="@form.CountryCode" Variant="MudBlazor.Variant.Outlined" Disabled=true Label="CountryCode" OnlyValidateIfDirty="true"
                                  Margin="@Margin.Dense" Required="true"/>
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField Class="styled-textfield" T="string" Variant="MudBlazor.Variant.Outlined" Label="Surname" For="@(() => form.SurName)" OnlyValidateIfDirty="true"
                                  @bind-Value="@form.SurName" OnBlur="@(x => form.SurName = form.SurName?.Trim().ToUpper())"
                                  Margin="@Margin.Dense" Required="true" RequiredError="Surname is required!"/>
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField Class="styled-textfield" T="string" Variant="MudBlazor.Variant.Outlined" Label="First Name" For="@(() => form.FirstName)" OnlyValidateIfDirty="true"
                                  @bind-Value="@form.FirstName" OnBlur="@(x => form.FirstName = form.FirstName?.Trim().ToUpper())"
                                  Margin="@Margin.Dense" Required="true" RequiredError="First name is required!"/>
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField Class="styled-textfield" T="string" Variant="MudBlazor.Variant.Outlined"
                                  Margin="@Margin.Dense" Label="Middle Name" For="@(() => form.SecondName)" @bind-Value="@form.SecondName"
                                  OnBlur="@(x => form.SecondName = form.SecondName?.Trim().ToUpper())"/>
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField Class="styled-textfield" T="string" Variant="MudBlazor.Variant.Outlined"
                                  Margin="@Margin.Dense" Label="Third Name" For="@(() => form.ThirdName)" @bind-Value="@form.ThirdName"
                                  OnBlur="@(x => form.ThirdName = form.ThirdName?.Trim().ToUpper())"/>
                </MudItem>
                @if (!string.IsNullOrEmpty(form.CountryCode))
                {
                    <MudItem xs="12" sm="12" md="12">
                        <MudTextField Class="styled-textfield" T="string" Variant="MudBlazor.Variant.Outlined" For="@(() => form.Nin)" Label="NIN" @bind-Value="@form.Nin"
                                      Margin="@Margin.Dense" OnlyValidateIfDirty="false" HelperText="@ViewModel.NinInternationalName"
                                      Immediate="true" Required="true"
                                      RequiredError="NIN is required!"
                                      Error="@(!string.IsNullOrEmpty(ViewModel.NinValidationErrorMessage))"
                                      ErrorText="@ViewModel.NinValidationErrorMessage"
                                      OnBlur="@ValidateNinAsync"/>
                    </MudItem>
                }
                <MudText Class="spaced-text" Align="Align.Center" Typo="Typo.body1">Please provide your documents.</MudText>
                @foreach (var document in citizenshipDocuments)
                {
                    var propertyInfo = ViewModel.Files.GetType().GetProperty(document.file);
                    var fileResult = propertyInfo?.GetValue(ViewModel.Files) as FileResult;

                    <MudCard Class="styled-card">
                        <MudCardContent>
                            <MudGrid Justify="Justify.SpaceBetween">
                                <MudItem xs="4" sm="4" md="4">
                                    <MudText Typo="Typo.body1">@document.description</MudText>
                                </MudItem>
                                <MudItem xs="2" sm="2" md="2">
                                    @if (fileResult != null)
                                    {
                                        <MudChip Class="centered-content" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Medium"/>
                                    }
                                </MudItem>
                                <MudItem xs="12" sm="12" md="2">
                                    <MudIconButton Icon="@Icons.Material.Filled.UploadFile" aria-label="@document.file" OnClick="@(args => UploadFile(document.file))"/>
                                    <MudIconButton Icon="@Icons.Material.Filled.Photo" aria-label="@document.file" OnClick="@(args => PickPhoto(document.file))"/>
                                    <MudIconButton Icon="@Icons.Material.Filled.CameraAlt" aria-label="@document.file" OnClick="@(args => TakePhoto(document.file))"/>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
            </MudCardContent>
            <MudCardActions >
                <MudItem Style="text-align: center;" xs="12">
                    <MudButton ButtonType="MudBlazor.ButtonType.Submit"
                               Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto" Disabled="!ViewModel.HasAddedMandatoryFiles">
                        Submit
                    </MudButton>
                </MudItem>
            </MudCardActions>
        </MudCard>
    </EditForm>
}
<style>
    .styled-textfield {
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
    }

    .styled-textfield:hover {
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .styled-textfield:focus {
        border-color: #007BFF;
        outline: none;
        box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
    }

    .spaced-text {
        margin-top: 20px;
        margin-bottom: 20px;
    }
</style>

@code {
        List<(string file, string description)> citizenshipDocuments =
        [
            ("IdentityCard", "Identity Card (front)"),
            ("IdentityCardBack", "Identity Card (back)"),
            ("Passport", "Passport"),
            ("ProofOfNin", "Proof Of Nin"),
            ("BirthCertificate", "Birth Certificate")
        ];

    EncryptedCitizenshipForm form;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ViewModel.OnInitializeAsync();
            form = ViewModel.CitizenshipForm;
        }
        catch (Exception e)
        {
            logger.LogError(e, "Error initializing page");
            throw;
        }
    }
    
    private async Task UploadFile(string property)
    {
        await ViewModel.PickFileCommand.ExecuteAsync(property);
    }

    private async Task TakePhoto(string property)
    {
        await ViewModel.TakePhotoCommand.ExecuteAsync(property);
    }

    private async Task PickPhoto(string property)
    {
        await ViewModel.PickPhotoCommand.ExecuteAsync(property);
    }

    private async Task ValidateNinAsync()
    {
        await ViewModel.ValidateNinCommand.ExecuteAsync(null);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var submittedForm = context.Model as EncryptedCitizenshipForm;
            await ViewModel.SubmitFormCommand.ExecuteAsync(submittedForm);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error submitting form");
            await Toast.Make(ex.Message).Show();
        }
    }
}