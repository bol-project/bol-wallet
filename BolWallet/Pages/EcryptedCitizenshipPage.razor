@page "/encrypted-citizenship"

@inject RegisterContent _content;
@inject ISecureRepository secureRepository;
@inject INavigationService navigationService;
@inject IMediaPicker mediaPicker;
@inject IPermissionService permissionService;
@inject IBase16Encoder base16Encoder

<MudThemeProvider />

<MudGrid>
    <MudItem xs="12" sm="7" style="margin-left: auto; margin-right: auto; margin-top: 10px;">
        <Virtualize Items="EncryptedCitizenshipForms" Context="encryptedCitizenshipForm">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">@encryptedCitizenshipForm.CountryName</MudText>
                        <MudItem xs="12" sm="12" md="12">
                            <MudTextField T="string" @bind-Value="@encryptedCitizenshipForm.CountryCode" Variant="MudBlazor.Variant.Outlined" Disabled=true Label="CountryCode" OnlyValidateIfDirty="true"
                                          Margin="@Margin.Dense" Required="true" />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudTextField T="string" Variant="MudBlazor.Variant.Outlined" Label="First Name" OnlyValidateIfDirty="true"
                                          @bind-Value="@encryptedCitizenshipForm.FirstName" OnBlur="@(x=> encryptedCitizenshipForm.FirstName= encryptedCitizenshipForm.FirstName?.Trim().ToUpper())"
                                          Margin="@Margin.Dense" Required="true" RequiredError="First name is required!" />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudTextField T="string" Variant="MudBlazor.Variant.Outlined" Label="Surname" OnlyValidateIfDirty="true"
                                          @bind-Value="@encryptedCitizenshipForm.SurName" OnBlur="@(x=> encryptedCitizenshipForm.SurName= encryptedCitizenshipForm.SurName?.Trim().ToUpper())"
                                          Margin="@Margin.Dense" Required="true" RequiredError="Surname is required!" />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudTextField T="string" Variant="MudBlazor.Variant.Outlined"
                                          Margin="@Margin.Dense" Label="Middle Name" @bind-Value="@encryptedCitizenshipForm.SecondName"
                                          OnBlur="@(x=> encryptedCitizenshipForm.SecondName= encryptedCitizenshipForm.SecondName?.Trim().ToUpper())" />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudTextField T="string" Variant="MudBlazor.Variant.Outlined"
                                          Margin="@Margin.Dense" Label="Third Name" @bind-Value="@encryptedCitizenshipForm.ThirdName"
                                          OnBlur="@(x=> encryptedCitizenshipForm.ThirdName= encryptedCitizenshipForm.ThirdName?.Trim().ToUpper())" />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudDatePicker Label="Birth Date(yyyy-MM-dd)" @bind-Value="@encryptedCitizenshipForm.BirthDate" Editable="true" Variant="MudBlazor.Variant.Outlined"
                                           Margin="@Margin.Dense"
                                           MinDate="new DateTime(1900, 1, 1)" MaxDate="new DateTime(lastYear, 12, 31)"
                                           Mask="@(new DateMask("0000-00-00"))" DateFormat="yyyy-MM-dd" Placeholder="Birth Date(yyyy-MM-dd)" />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12">
                            <MudTextField T="string" Variant="MudBlazor.Variant.Outlined" Label="NIN" @bind-Value="@encryptedCitizenshipForm.Nin"
                                          Margin="@Margin.Dense" OnlyValidateIfDirty="false" HelperText="@_content.NinPerCountryCode[encryptedCitizenshipForm.CountryCode].InternationalName"
                                          Immediate="true" Required="true"
                                          Error="@(!string.IsNullOrEmpty(NinErrorMessages[encryptedCitizenshipForm.CountryCode]))"
                                          ErrorText="@NinErrorMessages[encryptedCitizenshipForm.CountryCode]"
                                          OnBlur="@(() => ValidateNIN(encryptedCitizenshipForm))" />
                        </MudItem>
                        <MudText Typo="Typo.h6">To proceed with the verification process, please provide at least one document</MudText>
                        <Virtualize Items="CitizeshipsDocuments" Context="citizeshipDocument">
                            <MudItem xs="12" sm="12" md="12">
                                <MudStack Row="true">
                                    <MudField Style="width:150px" Label="@citizeshipDocument.Item3" Variant="MudBlazor.Variant.Text" InnerPadding="false"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.CheckCircle" AdornmentColor="@citizeshipDocument.Item2">@citizeshipDocument.Item4</MudField>
                                    <MudIconButton Icon="@Icons.Material.Filled.UploadFile" aria-label="@citizeshipDocument.Item1" OnClick="@(args=>UploadFile(citizeshipDocument.Item1, encryptedCitizenshipForm))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.CameraAlt" aria-label="@citizeshipDocument.Item1" OnClick="@(args=>TakePhoto(citizeshipDocument.Item1, encryptedCitizenshipForm))" />
                            </MudStack>
                        </MudItem>
                    </Virtualize>
                    </MudCardContent>
                </MudCard>
            </Virtualize>
        </MudItem>
    </MudGrid>

    @code {
    List<(string, MudBlazor.Color, string, string)> CitizeshipsDocuments = new()
      {
          {new(nameof(CitizenshipHashTable.IdentityCard),Color.Transparent, "Identity Card", "") },
          {new(nameof(CitizenshipHashTable.Passport),Color.Transparent, "Passport", "") },
          {new(nameof(CitizenshipHashTable.ProofOfNin), Color.Transparent, "Proof Of Nin", "") },
          {new(nameof(CitizenshipHashTable.BirthCertificate), Color.Transparent, "Birth Certificate", "") }
      };

    Dictionary<string, string> NinErrorMessages = new Dictionary<string, string>();

    List<EncryptedCitizenshipForm> EncryptedCitizenshipForms = new List<EncryptedCitizenshipForm>();

    int lastYear = DateTime.Now.Year - 1;

    protected override async Task OnInitializedAsync()
    {
        UserData userData = await secureRepository.GetAsync<UserData>("userdata");

        foreach (var citizenship in userData.Citizenships)
        {
            EncryptedCitizenshipForms.Add(new EncryptedCitizenshipForm()
            {
                CountryName = citizenship.Name,
                CountryCode = citizenship.Alpha3,
                CitizenshipHashes = new CitizenshipHashTable()
            });

            NinErrorMessages.Add(citizenship.Alpha3, string.Empty);
        }
    }

    private async Task UploadFile(string property, EncryptedCitizenshipForm encryptedCitizenshipForm)
    {
        var customFileType = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>> {
        { DevicePlatform.iOS, new[] { "com.adobe.pdf", "public.image", "public.audio" } },
        { DevicePlatform.Android, new[] { "application/pdf", "image/*", "audio/*" } },
        { DevicePlatform.macOS, new[] { "pdf", "public.image", "public.audio" } },
        { DevicePlatform.WinUI, new[] { ".pdf", ".gif", ".mp3", ".png" } },
        });

        var pickResult = await FilePicker.PickAsync(new PickOptions
            {
                FileTypes = customFileType,
                PickerTitle = "Pick a file"
            });

        encryptedCitizenshipForm = SetFileHash(property, pickResult, encryptedCitizenshipForm);

        await UpdateIdentificationDocumentsList(property, pickResult.FileName);
    }

    private async Task TakePhoto(string property, EncryptedCitizenshipForm encryptedCitizenshipForm)
    {
        if (await permissionService.CheckPermissionAsync<Permissions.Camera>() != PermissionStatus.Granted)
        {
            await permissionService.DisplayWarningAsync<Permissions.Camera>();
            return;
        }

        FileResult takePictureResult = await mediaPicker.CapturePhotoAsync();

        encryptedCitizenshipForm = SetFileHash(property, takePictureResult, encryptedCitizenshipForm);

        await UpdateIdentificationDocumentsList(property, takePictureResult.FileName);
    }

    private EncryptedCitizenshipForm SetFileHash(string property, FileResult fileResult, EncryptedCitizenshipForm encryptedCitizenshipForm)
    {
        if (fileResult != null)
        {
            var fileBytes = File.ReadAllBytes(fileResult.FullPath);
            var encodedFileBytes = base16Encoder.Encode(fileBytes);

            encryptedCitizenshipForm.CitizenshipHashes.GetType().GetProperty(property).SetValue(encryptedCitizenshipForm.CitizenshipHashes, encodedFileBytes);
        }

        return encryptedCitizenshipForm;
    }

    private async Task UpdateIdentificationDocumentsList(string property, string fileName)
    {
        if (!string.IsNullOrEmpty(fileName))
        {
            var index = CitizeshipsDocuments.FindIndex(x => x.Item1 == property);

            fileName = fileName.Length <= 20 ? fileName : fileName.Substring(0, 20) + "...";

            CitizeshipsDocuments[index] = new(CitizeshipsDocuments[index].Item1, Color.Success, CitizeshipsDocuments[index].Item3, fileName);

            await InvokeAsync(() => StateHasChanged());
        }
    }

    private string ValidateNIN(EncryptedCitizenshipForm encryptedCitizenshipForm)
    {
        string errorMessage = string.Empty;
        string pattern = @"^[A-F0-9]+$";
        Regex regex = new Regex(pattern);

        if (!(regex.IsMatch(encryptedCitizenshipForm.Nin) && _content.NinPerCountryCode[encryptedCitizenshipForm.CountryCode].Digits == encryptedCitizenshipForm.Nin.Length))
        {
            errorMessage = $"National Identification Number (NIN) does not match length for country {encryptedCitizenshipForm.CountryCode}. Only capital letters (A-F) and numbers accepted";
        }

        NinErrorMessages[encryptedCitizenshipForm.CountryCode] = errorMessage;

        return errorMessage;
    }
}
